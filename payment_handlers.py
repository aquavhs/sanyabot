import asyncio
import logging
import datetime
from aiogram import Bot, types
from aiogram import Dispatcher
from yoomoney import Client, Quickpay
from keyboards import get_payment_keyboard, get_subscription_keyboard
from database import Database
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –°–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_PRICES = {
    "sub_basic": {
        "amount": 90,
        "name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–µ–Ω—å",
        "label": "basic_user",
        "duration": datetime.timedelta(days=1)
    },
    "sub_standard": {
        "amount": 440,
        "name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é",
        "label": "standard_user",
        "duration": datetime.timedelta(days=7)
    },
    "sub_premium": {
        "amount": 1620,
        "name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",
        "label": "premium_user",
        "duration": datetime.timedelta(days=30)
    }
}

class PaymentHandler:
    def __init__(self, bot: Bot, yoomoney_client: Client, wallet_number: str, db: Database):
        self.bot = bot
        self.yoomoney_client = yoomoney_client
        self.wallet_number = wallet_number
        self.db = db
        self._check_subscriptions_task = None

    async def start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        self._check_subscriptions_task = asyncio.create_task(self.check_expiring_subscriptions())

    async def stop_background_tasks(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        if self._check_subscriptions_task:
            self._check_subscriptions_task.cancel()
            try:
                await self._check_subscriptions_task
            except asyncio.CancelledError:
                pass

    async def assign_user_label(self, user_id: int, username: str, subscription_type: str) -> None:
        """
        –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π label –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription_type (str): –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (sub_basic, sub_standard, sub_premium)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            sub_info = SUBSCRIPTION_PRICES[subscription_type]
            user_label = sub_info["label"]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            start_time = datetime.datetime.now()
            end_time = start_time + sub_info["duration"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.create_user(
                user_id=user_id,
                username=username,
                label=user_label,
                subscription_start=start_time,
                subscription_end=end_time
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∫–Ω–æ–ø–∫–æ–π
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π!\n\n"
                     f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_time.strftime('%d.%m.%Y %H:%M')}\n\n"
                     f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É",
                            url="https://t.me/+4_Qb6pPctkRkNGMy"
                        )]
                    ]
                )
            )
            
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø—Ä–∏—Å–≤–æ–µ–Ω label: {user_label}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–∏ label –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await self.bot.send_message(
                chat_id=user_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    async def check_expiring_subscriptions(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                users = await self.db.get_all_users()
                now = datetime.datetime.now()
                
                for user in users:
                    if user.get("subscription_end"):
                        end_time = datetime.datetime.strptime(
                            user["subscription_end"],
                            "%d.%m.%Y %H:%M:%S"
                        )
                        
                        # –ï—Å–ª–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª—Å—è —á–∞—Å
                        if (end_time - now).total_seconds() <= 3600:
                            await self.bot.send_message(
                                chat_id=user["user_id"],
                                text="‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ —á–∞—Å.\n"
                                     "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                                reply_markup=get_subscription_keyboard()
                            )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

    async def process_subscription_choice(self, callback_query: types.CallbackQuery, test_mode: bool = False):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
            subscription_type = callback_query.data
            selected_sub = SUBSCRIPTION_PRICES.get(subscription_type)
            
            if not selected_sub:
                await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                await callback_query.message.delete()
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            user = await self.db.get_user(callback_query.from_user.id)
            if user and user.get("subscription_end"):
                end_time = datetime.datetime.strptime(
                    user["subscription_end"],
                    "%d.%m.%Y %H:%M:%S"
                )
                if end_time > datetime.datetime.now():
                    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å",
                                    callback_data=f"extend_{subscription_type}"
                                ),
                                InlineKeyboardButton(
                                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                                    callback_data="cancel_extend"
                                )
                            ]
                        ]
                    )
                    await callback_query.message.answer(
                        f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {end_time.strftime('%d.%m.%Y %H:%M')}\n"
                        "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å?",
                        reply_markup=keyboard
                    )
                    return
            
            if test_mode:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
                await callback_query.message.answer(
                    f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º\n"
                    f"–í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {selected_sub['name']}\n"
                    f"–°—É–º–º–∞: {selected_sub['amount']}‚ÇΩ\n\n"
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞!"
                )
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                start_time = datetime.datetime.now()
                end_time = start_time + selected_sub["duration"]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await self.db.create_user(
                    user_id=callback_query.from_user.id,
                    username=callback_query.from_user.username or "Unknown",
                    label=selected_sub['label'],
                    subscription_start=start_time,
                    subscription_end=end_time
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                await callback_query.message.answer(
                    f"‚úÖ –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å: {selected_sub['label']}\n"
                    f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_time.strftime('%d.%m.%Y %H:%M')}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É
                await callback_query.message.answer(
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π!\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É:",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(
                                text="üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É",
                                url="https://t.me/+9dOYr5Z3XMk3YjQy"
                            )]
                        ]
                    )
                )
                return
            
            # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆMoney
            quickpay = Quickpay(
                receiver=self.wallet_number,
                quickpay_form="shop",
                targets=f"–û–ø–ª–∞—Ç–∞ {selected_sub['name']}",
                paymentType="AC",
                sum=selected_sub['amount'],
                label=f"{callback_query.from_user.id}_{callback_query.data}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ
            await callback_query.message.answer(
                f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã {selected_sub['name']} –Ω–∞ —Å—É–º–º—É {selected_sub['amount']}‚ÇΩ, "
                "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –Ω–∏–∂–µ.\n\n"
                "‚è≥ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 10 –º–∏–Ω—É—Ç",
                reply_markup=get_payment_keyboard(quickpay.redirected_url)
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã
            asyncio.create_task(self.check_payment(
                label=f"{callback_query.from_user.id}_{callback_query.data}",
                chat_id=callback_query.message.chat.id
            ))
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def process_extend_subscription(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            subscription_type = callback_query.data.replace("extend_", "")
            selected_sub = SUBSCRIPTION_PRICES.get(subscription_type)
            
            if not selected_sub:
                await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
                return

            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆMoney
            quickpay = Quickpay(
                receiver=self.wallet_number,
                quickpay_form="shop",
                targets=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ {selected_sub['name']}",
                paymentType="AC",
                sum=selected_sub['amount'],
                label=f"{callback_query.from_user.id}_extend_{subscription_type}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ
            await callback_query.message.edit_text(
                f"üí≥ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è {selected_sub['name']} –Ω–∞ —Å—É–º–º—É {selected_sub['amount']}‚ÇΩ, "
                "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –Ω–∏–∂–µ.\n\n"
                "‚è≥ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 10 –º–∏–Ω—É—Ç",
                reply_markup=get_payment_keyboard(quickpay.redirected_url)
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã
            asyncio.create_task(self.check_payment(
                label=f"{callback_query.from_user.id}_extend_{subscription_type}",
                chat_id=callback_query.message.chat.id,
                is_extension=True
            ))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def process_cancel_extend(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    async def check_payment(self, label: str, chat_id: int, is_extension: bool = False) -> bool:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - 10 –º–∏–Ω—É—Ç
            max_attempts = 30  # 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 20 —Å–µ–∫—É–Ω–¥
            attempts = 0
            
            while attempts < max_attempts:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
                history = self.yoomoney_client.operation_history(
                    label=label,
                    from_date=datetime.datetime.now() - datetime.timedelta(minutes=10)
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                for operation in history.operations:
                    if operation.status == "success" and operation.label == label:
                        # –ü–æ–ª—É—á–∞–µ–º user_id –∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ label
                        label_parts = label.split("_")
                        if len(label_parts) >= 2:
                            user_id = int(label_parts[0])
                            subscription_type = "_".join(label_parts[1:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                            user = await self.db.get_user(user_id)
                            username = user["username"] if user else "Unknown"
                            
                            if is_extension:
                                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                                current_end = datetime.datetime.strptime(
                                    user["subscription_end"],
                                    "%d.%m.%Y %H:%M:%S"
                                )
                                new_end = current_end + SUBSCRIPTION_PRICES[subscription_type]["duration"]
                                
                                await self.db.update_user_subscription(
                                    user_id=user_id,
                                    subscription_end=new_end
                                )
                                
                                await self.bot.send_message(
                                    chat_id=chat_id,
                                    text=f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n"
                                         f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end.strftime('%d.%m.%Y %H:%M')}"
                                )
                            else:
                                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º label –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                await self.assign_user_label(user_id, username, subscription_type)
                            return True
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                attempts += 1
                
                # –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(20)
                
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞ 10 –º–∏–Ω—É—Ç
            await self.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞."
            )
            return False
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await self.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return False

    async def process_check_payment(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º label –∏–∑ callback_data
            label = callback_query.data.replace("check_payment_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            history = self.yoomoney_client.operation_history(
                label=label,
                from_date=datetime.datetime.now() - datetime.timedelta(minutes=30)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            for operation in history.operations:
                if operation.status == "success" and operation.label == label:
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback_query.message.edit_text(
                        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                        reply_markup=None
                    )
                    return
            
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            await callback_query.answer(
                "‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                show_alert=True
            )
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
            await callback_query.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )

    def register_handlers(self, dp: Dispatcher):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        dp.register_callback_query_handler(
            self.process_subscription_choice,
            lambda c: c.data in SUBSCRIPTION_PRICES.keys()
        )
        dp.register_callback_query_handler(
            self.process_extend_subscription,
            lambda c: c.data.startswith("extend_")
        )
        dp.register_callback_query_handler(
            self.process_cancel_extend,
            lambda c: c.data == "cancel_extend"
        )
        dp.register_callback_query_handler(
            self.process_check_payment,
            lambda c: c.data == "check_payment"
        ) 
