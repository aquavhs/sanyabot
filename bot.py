import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
import os
from yoomoney import Client

from keyboards import get_main_keyboard, get_subscription_keyboard, get_admin_keyboard
from payment_handlers import PaymentHandler
from handlers import MessageHandler
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = os.path.join(os.path.dirname(__file__), '.env')
logging.info(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env: {env_path}")
logging.info(f"–§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(env_path)}")

# –ß–∏—Ç–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ .env (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π)
try:
    with open(env_path, 'r', encoding='utf-8') as f:
        env_content = f.read()
        logging.info("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ .env (—Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö):")
        for line in env_content.splitlines():
            if line.strip() and not line.strip().startswith('#'):
                var_name = line.split('=')[0].strip()
                logging.info(f"- {var_name}")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ .env: {e}")

load_dotenv(env_path)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
YOOMONEY_TOKEN = os.getenv('YOOMONEY_ACCESS_TOKEN')
WALLET_NUMBER = os.getenv('YOOMONEY_RECEIVER')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(',')))  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
logging.info(f"BOT_TOKEN –Ω–∞–π–¥–µ–Ω: {'–î–∞' if BOT_TOKEN else '–ù–µ—Ç'}")
logging.info(f"YOOMONEY_TOKEN –Ω–∞–π–¥–µ–Ω: {'–î–∞' if YOOMONEY_TOKEN else '–ù–µ—Ç'}")
logging.info(f"WALLET_NUMBER –Ω–∞–π–¥–µ–Ω: {'–î–∞' if WALLET_NUMBER else '–ù–µ—Ç'}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not YOOMONEY_TOKEN:
    raise ValueError("YOOMONEY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not WALLET_NUMBER:
    raise ValueError("YOOMONEY_RECEIVER –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ÆMoney
yoomoney_client = Client(YOOMONEY_TOKEN)  # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä token=

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()  # –°–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª bot_database.db –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
admin_test_modes = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
message_handler = MessageHandler(bot, yoomoney_client)
payment_handler = PaymentHandler(bot, yoomoney_client, WALLET_NUMBER, db)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    is_user_admin = is_admin(message.from_user.id)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_user_admin)
    )

@dp.callback_query(lambda c: c.data == "admin_panel")
async def process_admin_panel(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∞–¥–º–∏–Ω–∞
    is_test_mode = admin_test_modes.get(callback_query.from_user.id, False)
    
    await callback_query.message.edit_text(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(is_test_mode)
    )

@dp.callback_query(lambda c: c.data == "back_to_main")
async def process_back_to_main(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    is_user_admin = is_admin(callback_query.from_user.id)
    await callback_query.message.edit_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_user_admin)
    )

@dp.callback_query(lambda c: c.data == "admin_test_mode")
async def process_admin_test_mode(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_test_modes[callback_query.from_user.id] = not admin_test_modes.get(callback_query.from_user.id, False)
    current_mode = "—Ç–µ—Å—Ç–æ–≤—ã–π" if admin_test_modes[callback_query.from_user.id] else "—Ä–µ–∞–ª—å–Ω—ã–π"
    
    await callback_query.message.edit_text(
        f"üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {current_mode}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(admin_test_modes[callback_query.from_user.id])
    )

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query(lambda c: c.data == "admin_stats")
async def process_admin_stats(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await callback_query.answer("üìä –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@dp.callback_query(lambda c: c.data == "admin_users")
async def process_admin_users(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await callback_query.answer("üë• –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@dp.callback_query(lambda c: c.data == "admin_balance")
async def process_admin_balance(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    try:
        user = yoomoney_client.account_info()
        await callback_query.message.edit_text(
            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {user.balance} {user.currency}\n\n"
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard(admin_test_modes.get(callback_query.from_user.id, False))
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == "admin_settings")
async def process_admin_settings(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await callback_query.answer("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@dp.callback_query(lambda c: c.data == "subscribe")
async def process_subscribe_button(callback_query: types.CallbackQuery):
    await message_handler.process_subscribe_button(callback_query)

@dp.callback_query(lambda c: c.data.startswith("sub_"))
async def process_subscription_choice(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏ –≤–∫–ª—é—á–µ–Ω –ª–∏ –¥–ª—è –Ω–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    is_test_mode = is_admin(callback_query.from_user.id) and admin_test_modes.get(callback_query.from_user.id, False)
    await payment_handler.process_subscription_choice(callback_query, test_mode=is_test_mode)

@dp.callback_query(lambda c: c.data.startswith("extend_"))
async def process_extend_subscription(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    await payment_handler.process_extend_subscription(callback_query)

@dp.callback_query(lambda c: c.data == "cancel_extend")
async def process_cancel_extend(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    await payment_handler.process_cancel_extend(callback_query)

@dp.callback_query(lambda c: c.data == "cancel_payment")
async def cancel_payment(callback_query: types.CallbackQuery):
    await message_handler.cancel_payment(callback_query)

@dp.message(Command("balance"))
async def cmd_balance(message: Message):
    await message_handler.cmd_balance(message)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        await payment_handler.start_background_tasks()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        await payment_handler.stop_background_tasks()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main()) 